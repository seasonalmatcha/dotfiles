function zsh_add_file() {
  [ -f "$ZDOTDIR/$1" ] && source "$ZDOTDIR/$1"
}

function zsh_add_plugin() {
  PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
  if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then
    zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" || \
    zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.zsh"
  else
    git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
  fi
}

function zsh_add_completion() {
  PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
  if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then
    completion_file_path=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
    fpath+="$(dirname "${completion_file_path}")"
    zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh"
  else
    git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
    fpath+=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
    [ -f $ZDOTDIR/.zccompdump ] && $ZDOTDIR/.zccompdump
  fi

  completion_file="$(basename "${completion_file_path}")"
  if [ "$2" = true ] && compinit "${completion_file:1}"
}

function lazyload() {
  local seperator='--'
  local seperator_index=${@[(ie)$seperator]}
  local cmd_list=(${@:1:(($seperator_index - 1))});
  local load_cmd=${@[(($seperator_index + 1))]};

  if [[ ! $load_cmd ]]; then
    >&2 echo "[ERROR] lazyload: No load command defined"
    >&2 echo "  $@"
    return 1
  fi

  # check if lazyload was called by placeholder function
  if (( ${cmd_list[(Ie)${funcstack[2]}]} )); then
    unfunction $cmd_list
    eval "$load_cmd"
  else
    # create placeholder function for each command
    local cmd
    for cmd in $cmd_list; eval "function $cmd { lazyload $cmd_list $seperator ${(qqqq)load_cmd} && $cmd \"\$@\" }"
  fi

  ### Notes ###
  # ${funcstack[2]}      resolves to the caller function name
  # ${ARRAY[(Ie)$value]} resolves to the index of the VALUE within the ARRAY (I - Index; e - exact match, no pattern match)
  # (($NUMBER))          resolves to false for NUMBER 0, else true
  # ${(qqqq)VAR}         resolves to quoted value in the format of $'...'
}

function mkcd() {
  mkdir -p -- "$1" &&
  cd -P -- "$1"
}

function mkvs() {
  mkdir -p -- ".vscode"
  touch ".vscode/settings.json"
  echo '{"editor.defaultFormatter": "esbenp.prettier-vscode","editor.formatOnPaste": true,"editor.formatOnSave":true,"editor.codeActionsOnSave":{"source.fixAll": true}}' > ".vscode/settings.json"
}

function killport() {
  sudo kill -9 `sudo lsof -t -i:$1`
}

# Git clone bare with custom bare directory
# Usage: gwcl <url> <dir>
function gwcl() {
  local url=$1
  local dir=$2
  local bare=".bare"

  if ! [[ -n $url ]]; then
    echo "[ERROR]: url is not provided"
    return 1
  fi

  if ! [[ -n $dir ]]; then
    echo "[ERROR]: directory name is not provided"
    return 1
  fi

  if [[ -d $dir ]]; then
    echo "[ERROR]: directory '$dir' already exists"
    return 1
  fi

  mkdir -p "$dir"
  pushd "$dir" > /dev/null
  git clone --bare "$url" ".git"
  git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
  remote_head_branch=$(git remote show origin | grep 'HEAD branch' | awk '{print $NF}')
  local_default_branch=$(git config --global init.defaultBranch)

  if [[ -z $remote_head_branch ]]; then
    echo "Remote default branch cannot be determined. Skipping default worktree creation"
    return 0
  fi

  if [[ -z $local_default_branch ]]; then
    echo "Local default branch cannot be determined. Skipping default worktree creation"
    return 0
  fi

  git fetch
  git branch --set-upstream-to="origin/$remote_head_branch" "$local_default_branch"
  git worktree add "./$local_default_branch" "$local_default_branch"

  popd > /dev/null
  echo "Done"
}

# Git worktree add with new branch in a directory with the same name as the branch
# Usage: gwab <branch-name> <commit-ish>
function gwab() {
  local branch=$1
  local commit=$2

  if ! [[ -n $branch ]]; then
    echo "[ERROR]: branch name is not provided"
    return
  fi

  if ! [[ -n $commit ]]; then
    echo "[ERROR]: commit-ish name is not provided"
    return
  fi

  git worktree add "./$branch" -b "$branch" "$commit"
}
